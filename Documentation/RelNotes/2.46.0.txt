% داده‌های آزمایشی
c_e = [7.30128; 11.63975; 16.15898; 21.70256; 27.78846; 33.8141; 40.92436; 53.09615];
q_exp = [4.95345; 7.025; 9.25948; 11.26121; 12.70431; 14.05431; 15.54397; 18.45345];

% پارامترهای اولیه [q_m, b0, x, y]
params = [0.18, 0.05, 0.8, 0.5]; % اصلاح حدس اولیه
tolerance = 1e-6;  % تحمل خطا
max_iter = 1000;  % حداکثر تعداد تکرار

% الگوریتم نیوتن-رافسون
converged = false;
for iter = 1:max_iter
    % محاسبه گرادیان و هسین در نقطه فعلی
    g = zeros(4, 1);
    H = zeros(4, 4);
    
    for i = 1:length(c_e)
        qe_pred = baudu_isotherm(c_e(i), params);
        residuals = q_exp(i) - qe_pred;
        
        % Compute the gradient of the cost function w.r.t parameters
        grad_qm = -2 * sum(residuals .* (params(2) * (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                           (1 + params(2) * (c_e(i) .^ (1 + params(3)))))); % d(Cost)/dq_m
        grad_b0 = -2 * sum(residuals .* (params(1) * (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                           (1 + params(2) * (c_e(i) .^ (1 + params(3)))).^2)); % d(Cost)/db0
        grad_x = -2 * sum(residuals .* (params(1) * params(2) * log(c_e(i)) .* ...
                           (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                           (1 + params(2) * (c_e(i) .^ (1 + params(3)))))); % d(Cost)/dx
        grad_y = -2 * sum(residuals .* (params(1) * params(2) * log(c_e(i)) .* ...
                           (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                           (1 + params(2) * (c_e(i) .^ (1 + params(3)))))); % d(Cost)/dy

        % Compute the Hessian matrix
        H_qm_qm = 2 * sum((params(2) * (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                          (1 + params(2) * (c_e(i) .^ (1 + params(3)))).^2)); % d^2(Cost)/dq_m^2
        H_qm_b0 = 2 * sum((c_e(i) .^ (1 + params(3) + params(4))) .* (params(1) * (c_e(i) .^ (1 + params(3) + params(4))) .* log(c_e(i)) ./ ...
                          (1 + params(2) * (c_e(i) .^ (1 + params(3)))).^3)); % d^2(Cost)/dq_m db0
        H_b0_b0 = 2 * sum((params(1) * (c_e(i) .^ (1 + params(3) + params(4))) .* log(c_e(i)) ./ ...
                          (1 + params(2) * (c_e(i) .^ (1 + params(3)))).^2)); % d^2(Cost)/db0^2
        H_x_x = 2 * sum((params(1) * params(2) * (log(c_e(i)) .^ 2) .* (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                          (1 + params(2) * (c_e(i) .^ (1 + params(3)))).^2)); % d^2(Cost)/dx^2
        H_y_y = 2 * sum((params(1) * params(2) * (log(c_e(i)) .^ 2) .* (c_e(i) .^ (1 + params(3) + params(4))) ./ ...
                          (1 + params(2) * (c_e(i) .^ (1 + params(3)))).^2)); % d^2(Cost)/dy^2

        % Fill the Hessian matrix
        H = [H_qm_qm, H_qm_b0, 0, 0; 
             H_qm_b0, H_b0_b0, 0, 0; 
             0, 0, H_x_x, 0;
             0, 0, 0, H_y_y];

        % Update gradient vector
        g = [grad_qm; grad_b0; grad_x; grad_y];
    end
    
    % بررسی همگرایی
    if norm(g) < tolerance
        fprintf('Converged at iteration %d\n', iter);
        converged = true;
        break;
    end
    
    % تنظیم هسین ماتریس برای ثبات عددی
    delta_params = (H + 1e-5 * eye(4)) \ g;
    if any(isnan(delta_params)) || any(isinf(delta_params))
        fprintf('Numerical issue encountered at iteration %d\n', iter);
        break;
    end
    params = params - delta_params';
end

if ~converged
    fprintf('Did not converge within the given iterations\n');
end
fprintf('Optimized parameters: q_m = %f, b0 = %f, x = %f, y = %f\n', params(1), params(2), params(3), params(4));

% رسم نتایج
figure;
hold on;
plot(c_e, q_exp, 'ro', 'DisplayName', 'Experimental Data');
plot(c_e, baudu_isotherm(c_e, params), 'b-', 'DisplayName', 'Fitted Baudu Model');
xlabel('Equilibrium Concentration (c_e)');
ylabel('Adsorbed Amount (q_e)');
legend;
title('Experimental Data vs. Fitted Baudu Model');
hold off;

% تابع ایزوترم Baudu
function qe_pred = baudu_isotherm(c_e, params)
    q_m = params(1);
    b0 = params(2);
    x = params(3);
    y = params(4);
    qe_pred = (q_m * b0 .* (c_e .^ (1 + x + y))) ./ (1 + b0 * (c_e .^ (1 + x)));
end
